name: Camera Endurance Test

on:
  schedule:
    - cron: '0 22 * * *'  # 毎日22:00にプロセスを開始します
  workflow_dispatch:
    inputs:
      yaml_file:
        description: '読み込むYAMLファイルの名前 (拡張子なし)'
        required: true
        default: 'weekdays'
      build_or_publish:
        description: 'ビルドまたは公開 (build または publish)'
        required: true
        default: 'build'
        type: string

jobs:
  endurance_test_mekiki:
    runs-on: [self-hosted, windows]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name }}

      - name: Prepare Mekiki Directory
        run: |
          $projectDir = "C:\CSharp.Hutzper.Library"
          $repositoryUrl = "https://github.com/Hutzper-inc/CSharp.Hutzper.Library.git"
          $branch = '${{ github.ref_name }}'

          # branchがmainのとき、developに変更（のちに変更）
          if ($branch -eq 'main') {
            $branch = 'develop'
          }
          if (-Not (Test-Path $projectDir)) {
            git clone $repositoryUrl $projectDir
          } else {
            Set-Location -Path $projectDir
            git fetch origin
            git checkout $branch
            git pull origin $branch
          }
        shell: powershell

      - name: Restore and Build YamlParser Project
        run: |
          dotnet restore C:\CSharp.Hutzper.Library\test_endurance\YamlParser\YamlParser.csproj
          dotnet build C:\CSharp.Hutzper.Library\test_endurance\YamlParser\YamlParser.csproj -c Release
        shell: powershell

      - name: Build or Publish Project
        run: |
          $operation = '${{ github.event.inputs.build_or_publish }}'
          if ([string]::IsNullOrEmpty($operation)) {
            $operation = 'build'
          }
          $projectFile = "C:\CSharp.Hutzper.Library\Hutzper.Library.FormsMekiki\Hutzper.Project.Mekiki.csproj"

          if ($operation -eq 'build') {
            dotnet build $projectFile -c Release
          } elseif ($operation -eq 'publish') {
            dotnet publish $projectFile -c Release -o "C:\CSharp.Hutzper.Library\publish"
          } else {
            Write-Error "無効なオプションが指定されました。'build' または 'publish' を指定してください。"
            exit 1
          }
        shell: powershell

      - name: Parse YAML File and Write to JSON
        run: |
          $yamlFileName = '${{ github.event.inputs.yaml_file }}.yml'
          $yamlFilePath = "C:\CSharp.Hutzper.Library\test_endurance\settings\$yamlFileName"
          $jsonOutputPath = "C:\CSharp.Hutzper.Library\test_endurance\Parsing_result.json"

          # C#アプリケーションでYAMLファイルをJSONに変換
          dotnet run --project C:\CSharp.Hutzper.Library\test_endurance\YamlParser\YamlParser.csproj -- $yamlFilePath $jsonOutputPath

          if (-Not (Test-Path $jsonOutputPath)) {
            Write-Error "JSON出力ファイル '$jsonOutputPath' が作成されていません。"
            exit 1
          }

          # 結果を表示
          Get-Content $jsonOutputPath
        shell: powershell

      - name: Run Camera Tests
        run: |
          Write-Output "Starting Mekiki application..."
          $projectPath = "C:\CSharp.Hutzper.Library\Hutzper.Library.FormsMekiki\Hutzper.Project.Mekiki.csproj"
          Start-Process -FilePath "dotnet" -ArgumentList "run --project `"$projectPath`"" -NoNewWindow -PassThru | Out-Null
          Start-Sleep -Seconds 5

          Write-Output "Checking if Mekiki process is alive..."
          $processName = "Hutzper.Project.Mekiki"
          $startTime = Get-Date
          $endTime = $startTime.AddMinutes(1)
          
          while ((Get-Date) -lt $endTime) {
            $process = Get-Process -Name $processName -ErrorAction SilentlyContinue

            if ($process) {
              Write-Output "$processName is running."
              break
            }
            Start-Sleep -Seconds 5
          }

          if (-Not $process) {
            Write-Output "$processName has stopped within the 1-minute check period."
            exit 1
          }

          # 各カメラの動作テスト
          $configFilePath = "C:\CSharp.Hutzper.Library\test_endurance\Parsing_result.json"
          if (-Not (Test-Path $configFilePath)) {
            Write-Error "設定ファイル '$configFilePath' が存在しません。"
            exit 1
          }

          $configContent = Get-Content $configFilePath | Out-String
          $cameraSettings = $configContent | ConvertFrom-Json

          foreach ($camera in $cameraSettings.cameras) {
            $results = @()
            Write-Output "カメラ: $($camera.name)"
            Write-Output "テスト時間: $($camera.duration_minutes) 分"
            $processName = "Hutzper.Project.Mekiki"
            $startTime = Get-Date
            $endTime = $startTime.AddMinutes($camera.duration_minutes)

            Write-Output "カメラ $($camera.name) のテストを開始します"
            $cameraStopped = $false
            while ((Get-Date) -lt $endTime) {
              Start-Sleep -Seconds 5
              $process = Get-Process -Name $processName -ErrorAction SilentlyContinue
              $deadTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
              if (-Not $process) {
                Write-Output "$($deadTime): カメラ $($camera.name) が停止しました"
                $results += "$($deadTime): $($camera.name): Failure"
                $cameraStopped = $true
                break
              } else {
                Write-Output "$($deadTime): カメラ $($camera.name) は動作しています"
              }
            }
            # 結果を保存
            if($cameraStopped){
              $results += "$($camera.name): Success"
            }
            $results | Out-File -FilePath "C:\CSharp.Hutzper.Library\test_endurance\result\test_results.txt"
            Write-Output "結果が 'test_results.txt' に保存されました"

            if (-Not $cameraStopped) {
              Write-Output "カメラ $($camera.name) のテストが成功しました"
              $results += "$($camera.name): Success"
            } else {
              Write-Output "カメラ $($camera.name) のテストが失敗しました"
              exit 1
            }
          }
        shell: powershell

      - name: Notify GitHub Actions of Result
        run: |
          $resultsFilePath = "C:\CSharp.Hutzper.Library\test_endurance\result\test_results.txt"
          if (Test-Path $resultsFilePath) {
            Write-Output "テスト結果を保存しました"
            $resultsContent = Get-Content $resultsFilePath
            Write-Output "テスト結果:"
            Write-Output $resultsContent
          } else {
            Write-Error "テスト結果ファイルが見つかりません"
            exit 1
          }
        shell: powershell
