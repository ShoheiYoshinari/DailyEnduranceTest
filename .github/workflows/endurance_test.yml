name: Endurance Test

run-name: "Endurance test ${{ github.event.inputs.yaml_file }}"
on:
  schedule:
    - cron: '0 22 * * *'  # 毎日22:00にプロセスを開始します
  workflow_dispatch:
    inputs:
      yaml_file:
        description: '読み込むyamlファイルの名前 (拡張子なし)'
        required: false
        default: 'weekdays'
      build_or_publish:
        description: 'ビルドまたは公開 (build または publish)'
        required: false
        type: choice
        options:
          - 'build'
          - 'publish'
        default: 'build'

env:
  test_dir: "C:/Hutzper/self_host_runner/CSharp.Hutzper.Library"
  repository_url: "https://github.com/Hutzper-inc/CSharp.Hutzper.Library.git"
  mekiki_project: "C:/Hutzper/self_host_runner/CSharp.Hutzper.Library/Hutzper.Library.FormsMekiki/Hutzper.Project.Mekiki.csproj"
  test_settings_dir: "C:/Hutzper/self_host_runner/CSharp.Hutzper.Library/test_endurance/settings"
  mekiki_setting: "C:/Hutzper/self_host_runner/CSharp.Hutzper.Library/Hutzper.Library.FormsMekiki/bin"
  log_dir: "C:/Hutzper/self_host_runner/CSharp.Hutzper.Library/Hutzper.Library.FormsMekiki/bin/x64/log"
  test_results_dir: "C:/Hutzper/self_host_runner/CSharp.Hutzper.Library/test_endurance/result"
  dotnet_trace_dir: "C:/Hutzper/self_host_runner/CSharp.Hutzper.Library/test_endurance/trace"
  vs_path: "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/devenv.exe"

jobs:
  endurance_test_mekiki:
    runs-on: [self-hosted, windows]
    steps:
      - name: Get Current Timestamp and Date Suffix
        id: get_timestamp_and_suffix
        run: |
          $timestamp = (Get-Date -Format "yyyyMMdd-HHmmss")
          $dateSuffix = (Get-Date -Format "yyyyMMdd")
          echo "::set-output name=timestamp::$timestamp"
          echo "::set-output name=date_suffix::$dateSuffix"
        shell: powershell

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name }}

      - name: Prepare Mekiki Branch
        run: |
          $branch = '${{ github.ref_name }}'
          if ($branch -eq 'main') {
            $branch = 'test_endurance'
          }
          if (-Not (Test-Path "${{ env.test_dir }}")) {
            git clone ${{ env.repository_url }} ${{ env.test_dir }}
          }
          Set-Location -Path ${{ env.test_dir }}
          git fetch origin
          git checkout $branch
          git pull origin $branch
        shell: powershell

      - name: Dotnet Build or Publish 
        run: |
          $operation = '${{ github.event.inputs.build_or_publish }}'
          if ($operation -eq '') {
            $operation = 'build'
          }
          if ($operation -eq 'build') {
            dotnet build ${{ env.mekiki_project }} -c Release
          } elseif ($operation -eq 'publish') {
            dotnet publish ${{ env.mekiki_project }} -c Release -o "${{ env.test_dir }}/publish"
          } else {
            Write-Error "無効なオプションが指定されました。'build' または 'publish' を指定してください。"
            exit 1
          }
        shell: powershell

      - name: Install PowerShell-Yaml Module
        run: |
          Install-Module -Name powershell-yaml -Scope CurrentUser -Force
        shell: powershell

      - name: Read YAML File and Run Tests
        run: |
          $timestamp = '${{ steps.get_timestamp_and_suffix.outputs.timestamp }}'
          $date_suffix = '${{ steps.get_timestamp_and_suffix.outputs.date_suffix }}'
          # 入力ファイルが指定されていなければデフォルト 'weekdays.yml' を使用
          $yamlFileInput = '${{ github.event.inputs.yaml_file }}'
          if($yamlFileInput -eq '') {
            $yamlFileInput = 'weekdays'
          }
          $yamlFileName = "$yamlFileInput.yml"
          $yamlFilePath = "${{ env.test_settings_dir }}\$yamlFileName"
          
          if (-Not (Test-Path $yamlFilePath)) {
            Write-Error "YAMLファイル '$yamlFilePath' が存在しません。"
            exit 1
          }
          $yamlContent = Get-Content $yamlFilePath | Out-String
          $processSettings = $yamlContent | ConvertFrom-Yaml

          # 日付ごとのフォルダを作成
          $dateFolder = "${{ env.test_results_dir }}/$date_suffix"
          if (-Not (Test-Path $dateFolder)) {
            New-Item -Path $dateFolder -ItemType Directory | Out-Null
          }
          # テストごとのフォルダの作成
          $testsFolder = "$dateFolder/$timestamp"
          if (-Not (Test-Path $testsFolder)) {
            New-Item -Path $testsFolder -ItemType Directory | Out-Null
          }
          # 動作テストのために各テストごとにプロセスを起動
          $results = @()
          $logResults = @()
          foreach ($tests in $processSettings.tests) {
            # 設定フォルダを特定のパスに上書きする
            $zipFileInput = "$($tests.name)"
            if($zipFileInput -eq '') {
              $zipFileInput = 'weekdays'
            }
            $zipFileName = "$zipFileInput.zip"
            $zipFilePath = "${{ env.test_settings_dir }}\$zipFileName"
            if (-Not (Test-Path $zipFilePath)) {
              Write-Error "ZIPファイル '$zipFilePath' が存在しません。"
              exit 1
            }
            # ZIPファイルを展開してx64に上書き
            Remove-Item -Path "${{ env.mekiki_setting }}/x64" -Recurse -Force
            Copy-Item -Path $zipFilePath -Destination ${{ env.mekiki_setting }} -Force
            Expand-Archive -Path "${{ env.mekiki_setting }}\$zipFileName" -DestinationPath ${{ env.mekiki_setting }} -Force
            Remove-Item -Path "${{ env.mekiki_setting }}\$zipFileName" -Force
            Write-Output "ZIPファイル '$zipFileName' の内容を '${{ env.mekiki_setting }}' に展開しました。"

            #展開したzipファイルのディレクトリにlogフォルダの作成
            $logFolder = Join-Path -Path "${{ env.mekiki_setting }}/x64" -ChildPath "log"
            if (-Not (Test-Path $logFolder)) {
              New-Item -Path $logFolder -ItemType Directory | Out-Null
            }
            # 空のlogファイルの作成
            $logFilePath = Join-Path -Path $logFolder -ChildPath "$date_suffix.log"
            if (-Not (Test-Path $logFilePath)) {
              New-Item -Path $logFilePath -ItemType File -Force | Out-Null
            }

            Write-Output "Starting Mekiki application for test: $($tests.name)..."
            if (-Not (Test-Path "${{ env.vs_path }}")) {
              Write-Error "Visual Studio のパスが見つかりません。"
              exit 1
            }
            Start-Process -FilePath "${{ env.vs_path }}" -ArgumentList "`"$($env:mekiki_project)`" /Run" -NoNewWindow -PassThru | Out-Null
            Start-Sleep -Seconds 5

            Write-Output "Checking if Mekiki process is alive..."
            $processName = "Hutzper.Project.Mekiki"
            $startTime = Get-Date
            $endTime = $startTime.AddMinutes(1)
            while ((Get-Date) -lt $endTime) {
              $process = Get-Process -Name $processName -ErrorAction SilentlyContinue
              if ($process) {
                Write-Output "$processName is running."
                break
              }
              Start-Sleep -Seconds 5
            }
            if (-Not $process) {
              Write-Output "$processName has stopped within the 1-minute check period."
              exit 1
            }
            # 動作テスト
            $resultsFilePath = "${testsFolder}/test_results_$timestamp.txt"
            $logResultsFilePath = "${testsFolder}/log_results_$timestamp.txt"
            $startTime = Get-Date
            $endTime = $startTime.AddMinutes($tests.duration_minutes)
            Write-Output "プロセス $($tests.name) のテストを開始します"

            # 指定された負荷テスト実行
            if ($tests.cpu_load) {
              Write-Output "Starting CPU load test with $($tests.cpu_load)% CPU usage"
              Start-Process -FilePath "wsl" -ArgumentList "stress-ng --cpu 0 --cpu-load $($tests.cpu_load) --timeout $($tests.duration_minutes)m" -NoNewWindow -PassThru | Out-Null
            }
            if ($tests.memory_load) {
              Write-Output "Starting Memory load test with $($tests.memory_load)GB"
              Start-Process -FilePath "wsl" -ArgumentList "stress-ng --vm 1 --vm-bytes $($tests.memory_load)G --timeout $($tests.duration_minutes)m" -NoNewWindow -PassThru | Out-Null
            }
            if ($tests.disk_load) {
              Write-Output "Starting Disk load test with $($tests.disk_load)G Disk usage"
              Start-Process -FilePath "wsl" -ArgumentList "stress-ng -d 1 --hdd-bytes $($tests.disk_load)G --timeout $($tests.duration_minutes)m" -NoNewWindow -PassThru | Out-Null
            }

            # dotnet-trace
            # 環境変数からトレースディレクトリを取得
            $traceDir = "${{ env.dotnet_trace_dir }}"
            # Mekiki プロセスを取得
            $mekikiProcess = Get-Process | Where-Object { $_.Name -like "*mekiki*" }
            if (-not $mekikiProcess) {
              Write-Host "Mekiki プロセスが見つかりません。アプリケーションが起動していることを確認してください。" -ForegroundColor Red
              exit 1
            }
            # プロセス ID の取得
            $mekikiProcessId = $mekikiProcess.Id
            Write-Host "Mekiki プロセスが見つかりました。プロセス ID: $mekikiProcessId"
            # トレースファイル保存用のディレクトリとファイル名
            if (-not (Test-Path -Path $traceDir)) {
              New-Item -ItemType Directory -Path $traceDir | Out-Null
            }
            $traceFilePath = Join-Path -Path $traceDir -ChildPath "Mekiki_Trace_$($tests.name).nettrace"
            # dotnet-trace コマンドの実行
            Write-Host "dotnet trace collect を開始します。トレースファイル: $traceFilePath" -ForegroundColor Cyan
            $hours = [math]::Floor($tests.duration_minutes / 60)
            $minutes = $tests.duration_minutes % 60
            $duration = "{0:D2}:{1:D2}:00" -f $hours, $minutes
            $traceProcess = Start-Process -FilePath "dotnet" -ArgumentList @("trace", "collect", "--process-id", $mekikiProcessId, "--profile", "gc-collect", "--output", $traceFilePath, "--duration", $duration) -NoNewWindow

            Write-Host "トレースが開始されました。プロセス ID: $mekikiProcessId"
            $processStopped = $false
            while ((Get-Date) -lt $endTime) {
              Start-Sleep -Seconds 5
              $logContent = Get-Content $logFilePath -Raw
              $logLines = $logContent -split "`n"
              $filteredLines = @()
              foreach ($line in $logLines) {
                if ($line -match "^\d{2}:\d{2}:\d{2}\.\d{3}") {
                  $lineTimestamp = $matches[0]
                  $lineTime = [datetime]::ParseExact($lineTimestamp, "HH:mm:ss.fff", $null)
                 if ($lineTime -gt [datetime]::ParseExact($timestamp, "yyyyMMdd-HHmmss", $null)) {
                    $filteredLines += $line
                  }
                }
              }
              $logResults = $filteredLines
              $deadTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
              $process = Get-Process -Name $processName -ErrorAction SilentlyContinue

              function Handle-TestFailure {
                param (
                  [string]$message,     # エラーメッセージ
                  [string]$logFilePath, # ログファイルパス
                  [string]$resultsFilePath, # 結果のファイルパス
                  [string]$logResultsFilePath # ログ結果のファイルパス
                )

                Write-Output "$message"
                $errorLines = $filteredLines | Select-String "異常" | ForEach-Object { $_.Line }
                $results += "$($tests.name): Failure`n"
                $results += "$($message)"
                $logHistory += "$logResults"
                $results | Out-File -FilePath $resultsFilePath -Append
                $errorLines | Out-File -FilePath $resultsFilePath -Append
                $logHistory | Out-File -FilePath $logResultsFilePath -Append
                Get-Content -Path $logFilePath | Write-Host
                Write-Output "結果が 'test_results_$($timestamp).txt' に保存されました"
                Write-Output "ログが 'log_results_$($timestamp).txt' に保存されました"
                # 異常をGitHub Actionsに通知し、ジョブを失敗させる
                Write-Host "::error::$message"
                $traceProcess | Stop-Process #トレースを終了
                exit 1
              }

              if ($filteredLines -match "Exception" -and $tests.exception_log) {
                $errorMessage = "$($deadTime): $($tests.name)テスト中にログ内で『exception』が検知されました"
                Handle-TestFailure -message $errorMessage -logFilePath $logFilePath -resultsFilePath $resultsFilePath -logResultsFilePath $logResultsFilePath
              }
              if ($filteredLines -match "異常" -and $tests.error_log) {
                $errorMessage = "$($deadTime): $($tests.name)テスト中にログ内で『異常』が検知されました"
                Handle-TestFailure -message $errorMessage -logFilePath $logFilePath -resultsFilePath $resultsFilePath -logResultsFilePath $logResultsFilePath
              }
              if (-not $process -and $tests.process_alive) {
                $errorMessage = "$($deadTime): $($tests.name)テスト中にプロセスが停止していることを検知しました"
                Handle-TestFailure -message $errorMessage -logFilePath $logFilePath -resultsFilePath $resultsFilePath -logResultsFilePath $logResultsFilePath
              }
              Write-Output "$($deadTime): $($tests.name)は動作しています"
            }
            if (-Not $processStopped) { 
              Write-Output "$($tests.name) のテストが成功しました"
              $results += "$($tests.name): Success"
              $logHistory += "$($logResults)"
            }
            # トレースが正常終了したか確認
            if (Test-Path -Path $traceFilePath) {
              Write-Output "トレースファイルが生成されました: $traceFilePath"
            } else {
              Write-Error "トレースファイルが生成されませんでした。"
            }
            Write-Output "Visual Studioを終了しています..."
            Stop-Process -Name devenv -Force
            # トレースを終了 (テスト終了後に停止)
            Write-Host "テストが終了しました。トレースを停止します。" -ForegroundColor Yellow
            $traceProcess | Stop-Process
            Start-Sleep -Seconds 10
          }
          $results | Out-File -FilePath $resultsFilePath -Append
          Write-Output "結果が 'test_results_$($timestamp).txt' に保存されました"
          $logHistory | Out-File -FilePath $logResultsFilePath -Append
          Write-Output "ログが 'log_results_$($timestamp).txt' に保存されました"
          Write-Output "すべてのテストが終了しました"
        shell: powershell