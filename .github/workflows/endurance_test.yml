name: Endurance Test

on:
  schedule:
    - cron: '0 22 * * *'  # 毎日22:00にプロセスを開始します
  workflow_dispatch:
    inputs:
      yaml_file:
        description: '読み込むYAMLファイルの名前 (拡張子なし)'
        required: true
        default: 'weekdays'
      build_or_publish:
        description: 'ビルドまたは公開 (build または publish)'
        required: true
        default: 'build'
        type: string

# グローバルに使う変数をenvセクションに定義（小文字）
env:
  test_dir: "C:/Hutzper/self_host_runner"
  repository_url: "https://github.com/Hutzper-inc/CSharp.Hutzper.Library.git"
  yaml_parser_proj: "C:/CSharp.Hutzper.Library/test_endurance/YamlParser/YamlParser.csproj"
  mekiki_project: "C:/CSharp.Hutzper.Library/Hutzper.Library.FormsMekiki/Hutzper.Project.Mekiki.csproj"
  yaml_settings_dir: "C:/CSharp.Hutzper.Library/test_endurance/settings"
  json_output_path: "C:/CSharp.Hutzper.Library/test_endurance/Parsing_result.json"
  results_dir: "C:/CSharp.Hutzper.Library/test_endurance/result"

jobs:
  set_timestamp:
    runs-on: [self-hosted, windows]
    outputs:
      timestamp: ${{ steps.get_timestamp.outputs.timestamp }}
    steps:
      - name: Get Current Timestamp
        id: get_timestamp
        run: |
          $timestamp = (Get-Date -Format "yyyyMMdd-HHmmss")
          echo "::set-output name=timestamp::$timestamp"
        shell: powershell

  endurance_test_mekiki:
    runs-on: [self-hosted, windows]
    needs: set_timestamp
    env:
      timestamp: ${{ needs.set_timestamp.outputs.timestamp }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name }}

      - name: Prepare Mekiki Directory
        run: |
          $branch = '${{ github.ref_name }}'

          # branchがmainのとき、developに変更
          if ($branch -eq 'main') {
            $branch = 'develop'
          }

          if (-Not (Test-Path "${{ env.test_dir }}")) {
            git clone ${{ env.repository_url }} ${{ env.test_dir }}
          } else {
            Set-Location -Path ${{ env.test_dir }}
            git fetch origin
            git checkout $branch
            git pull origin $branch
          }
        shell: powershell

      - name: Restore and build YamlParser
        run: |
          dotnet restore ${{ env.yaml_parser_proj }}
          dotnet build ${{ env.yaml_parser_proj }} -c Release
        shell: powershell

      - name: Build or Publish Project
        run: |
          $operation = '${{ github.event.inputs.build_or_publish }}'
          if ([string]::IsNullOrEmpty($operation)) {
            $operation = 'build'
          }

          if ($operation -eq 'build') {
            dotnet build ${{ env.mekiki_project }} -c Release
          } elseif ($operation -eq 'publish') {
            dotnet publish ${{ env.mekiki_project }} -c Release -o "${{ env.test_dir }}/publish"
          } else {
            Write-Error "無効なオプションが指定されました。'build' または 'publish' を指定してください。"
            exit 1
          }
        shell: powershell

      - name: Parse YAML File and Write to JSON
        run: |
          $yamlFileName = '${{ github.event.inputs.yaml_file }}.yml'
          $yamlFilePath = "${{ env.yaml_settings_dir }}\$yamlFileName"
          $jsonOutputPath = "${{ env.json_output_path }}"

          # C#アプリケーションでYAMLファイルをJSONに変換
          dotnet run --project ${{ env.yaml_parser_proj }} -- $yamlFilePath $jsonOutputPath

          if (-Not (Test-Path $jsonOutputPath)) {
            Write-Error "JSON出力ファイル '$jsonOutputPath' が作成されていません。"
            exit 1
          }

          # 結果を表示
          Get-Content $jsonOutputPath
        shell: powershell

      - name: Run Process Tests
        run: |
          Write-Output "Starting Mekiki application..."
          Start-Process -FilePath "dotnet" -ArgumentList "run --project `"(${{ env.mekiki_project }})`"" -NoNewWindow -PassThru | Out-Null
          Start-Sleep -Seconds 5

          Write-Output "Checking if Mekiki process is alive..."
          $processName = "Hutzper.Project.Mekiki"
          $startTime = Get-Date
          $endTime = $startTime.AddMinutes(1)

          while ((Get-Date) -lt $endTime) {
            $process = Get-Process -Name $processName -ErrorAction SilentlyContinue

            if ($process) {
              Write-Output "$processName is running."
              break
            }
            Start-Sleep -Seconds 5
          }

          if (-Not $process) {
            Write-Output "$processName has stopped within the 1-minute check period."
            exit 1
          }

          # 各プロセスの動作テスト
          $configFilePath = "${{ env.json_output_path }}"
          if (-Not (Test-Path $configFilePath)) {
            Write-Error "設定ファイル '$configFilePath' が存在しません。"
            exit 1
          }

          $configContent = Get-Content $configFilePath | Out-String
          $processSettings = $configContent | ConvertFrom-Json

          $timestamp = '${{ env.timestamp }}'
          $resultsFilePath = "${{ env.results_dir }}\test_results_$timestamp.txt"

          $results = @()
          foreach ($tests in $processSettings.cameras) {
            Write-Output "プロセス: $($tests.name)"
            Write-Output "テスト時間: $($tests.duration_minutes) 分"
            $startTime = Get-Date
            $endTime = $startTime.AddMinutes($tests.duration_minutes)

            Write-Output "プロセス $($tests.name) のテストを開始します"
            $processStopped = $false
            while ((Get-Date) -lt $endTime) {
              Start-Sleep -Seconds 5
              $process = Get-Process -Name $processName -ErrorAction SilentlyContinue
              $deadTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
              if (-Not $process) {
                Write-Output "$($deadTime): プロセス $($tests.name) が停止しました"
                $results += "$($deadTime): $($tests.name): Failure"
                $processStopped = $true
                break
              } else {
                Write-Output "$($deadTime): プロセス $($tests.name) は動作しています"
              }
            }
            # 結果を保存
            if (-Not $processStopped) {
              Write-Output "プロセス $($tests.name) のテストが成功しました"
              $results += "$($tests.name): Success"
            } else {
              Write-Output "プロセス $($tests.name) のテストが失敗しました"
              $results += "$($tests.name): Failure"
              $results | Out-File -FilePath $resultsFilePath -Append
              Write-Output "結果が 'test_results_$($timestamp).txt' に保存されました"
              exit 1
            }
          }
          $results | Out-File -FilePath $resultsFilePath -Append
          Write-Output "結果が 'test_results_$($timestamp).txt' に保存されました"
        shell: powershell
