name: Endurance Test v2

on:
  schedule:
    - cron: '0 22 * * *'
  workflow_dispatch:
    inputs:
      yaml_file:
        description: '読み込むYAMLファイルの名前 (拡張子なし)'
        required: false
        default: 'weekdays'
      build_or_publish:
        description: 'ビルドまたは公開 (build または publish)'
        required: false
        type: choice
        options:
          - 'build'
          - 'publish'
        default: 'build'

env:
  test_dir: "C:/Hutzper/self_host_runner/CSharp.Hutzper.Library"
  repository_url: "https://github.com/Hutzper-inc/CSharp.Hutzper.Library.git"
  mekiki_project: "C:/Hutzper/self_host_runner/CSharp.Hutzper.Library/Hutzper.Library.FormsMekiki/Hutzper.Project.Mekiki.csproj"
  yaml_settings_dir: "C:/Hutzper/self_host_runner/CSharp.Hutzper.Library/test_endurance/settings"
  log_dir: "C:/Hutzper/self_host_runner/CSharp.Hutzper.Library/Hutzper.Library.FormsMekiki/bin/x64/log"
  base_results_dir: "C:/Hutzper/self_host_runner/CSharp.Hutzper.Library/test_endurance/result"
  vs_path: "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/devenv.exe"

jobs:
  endurance_test_mekiki:
    runs-on: [self-hosted, windows]
    steps:
      - name: Get Current Timestamp and Date Suffix
        id: get_timestamp_and_suffix
        run: |
          $timestamp = (Get-Date -Format "yyyyMMdd-HHmmss")
          $dateSuffix = (Get-Date -Format "yyyyMMdd")
          echo "::set-output name=timestamp::$timestamp"
          echo "::set-output name=date_suffix::$dateSuffix"
        shell: powershell

      - name: Checkout Repository and Prepare Branch
        run: |
          $branch = '${{ github.ref_name }}'
          if ($branch -eq "main") {
            $branch = "test_endurance"
          }
          ./scripts/prepare_repository.ps1 -repoUrl "${{ env.repository_url }}" -dir "${{ env.test_dir }}" -branch "test_endurance"

          if ($LASTEXITCODE -ne 0) {
            echo "エラー: リポジトリのチェックアウトに失敗しました"
            exit 1
          }
          echo "::set-env name=TEST_RESULT::1"
        shell: powershell

      - name: Build or Publish Mekiki Project
        run: |
          $operation = '${{ github.event.inputs.build_or_publish }}'
          if ($operation -eq "") {
            $operation = "build"
          }
          ./scripts/build_or_publish.ps1 -operation "$operation" -projectPath "${{ env.mekiki_project }}" -outputDir "${{ env.test_dir }}/publish"

          if ($LASTEXITCODE -ne 0) {
            echo "エラー: ビルドまたは公開に失敗しました"
            exit 1
          }
          echo "::set-env name=TEST_RESULT::1"
        shell: powershell

      - name: Install PowerShell-Yaml Module
        run: |
          Install-Module -Name powershell-yaml -Scope CurrentUser -Force

          if ($LASTEXITCODE -ne 0) {
            echo "エラー: PowerShell-Yaml モジュールのインストールに失敗しました"
            exit 1
          }
          echo "::set-env name=TEST_RESULT::1"
        shell: powershell

      - name: Read YAML File and Start Mekiki Tests
        run: |
          ./scripts/start_mekiki_tests.ps1 `
            -yamlFileInput "${{ github.event.inputs.yaml_file }}" `
            -vsPath "${{ env.vs_path }}" `
            -mekikiProject "${{ env.mekiki_project }}" `
            -logDir "${{ env.log_dir }}" `
            -baseResultsDir "${{ env.base_results_dir }}" `
            -timestamp "${{ steps.get_timestamp_and_suffix.outputs.timestamp }}" `
            -dateSuffix "${{ steps.get_timestamp_and_suffix.outputs.date_suffix }}"
            
          if ($LASTEXITCODE -ne 0) {
            echo "エラー: Mekiki テストの実行に失敗しました"
            exit 1
          }
          echo "::set-env name=TEST_RESULT::1"
        shell: powershell
