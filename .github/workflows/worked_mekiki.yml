name: Build and Run Mekiki

on:
  schedule:
    - cron: '0 22 * * *'  # Start the process every day at 22:00
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform (build, run, check, stop)'
        required: false
        default: 'run'
        type: string
      end_time:
        description: 'End time for retry loop (HH:mm format)'
        required: false
        type: string
      branch:
        description: 'Branch to use'
        required: false
        default: 'develop'
        type: choice
        options:
          - 'main'
          - 'develop'
          - 'feature-branch1'
          - 'feature-branch2'
          
jobs:
  build_and_run:
    runs-on: [self-hosted, windows]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Prepare Project Directory
        run: |
          $projectDir = "C:\CSharp.Hutzper.Library"
          $repositoryUrl = "https://github.com/Hutzper-inc/CSharp.Hutzper.Library.git"
          $branch = '${{ github.event.inputs.branch }}'
          if (-Not $branch) {
            $branch = 'develop'
          }

          if (-Not (Test-Path $projectDir)) {
            git clone $repositoryUrl $projectDir
          } else {
            Set-Location -Path $projectDir
            git fetch origin
            git checkout $branch
            git pull origin $branch
          }
        shell: powershell

      - name: Build Project
        run: |
          $msbuildPath = "C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Current\Bin\MSBuild.exe"
          $csprojPath = "C:\CSharp.Hutzper.Library\Hutzper.Library.FormsMekiki\Hutzper.Project.Mekiki.csproj"
          $arguments = "/p:Configuration=Release /p:Platform=x64 /verbosity:diagnostic /p:OutputPath=C:\CSharp.Hutzper.Library\bin\Release"
          & $msbuildPath $csprojPath $arguments
        shell: powershell

      - name: Verify Build Output
        run: |
          Get-ChildItem -Path "C:\CSharp.Hutzper.Library\bin\Release" | Format-Table Name, Length
        shell: powershell

      - name: Run Application
        run: |
          $exePath = "C:\CSharp.Hutzper.Library\bin\Release\Hutzper.Project.Mekiki.exe"
          if (Test-Path $exePath) {
            Start-Process -FilePath $exePath
          } else {
            Write-Output "File not found: $exePath"
            exit 1
          }
        shell: powershell

      - name: Check if Hutzper.Project.Mekiki Process is Alive
        id: check-mekiki-process
        run: |
          Start-Sleep -Seconds 30
          $processName = "Hutzper.Project.Mekiki"
          $startTime = Get-Date
          $endTime = $startTime.AddMinutes(1)
          
          while ((Get-Date) -lt $endTime) {
            $process = Get-Process -Name $processName -ErrorAction SilentlyContinue

            if ($process) {
              Write-Output "$processName is running."
              exit 0
            }

            Start-Sleep -Seconds 5
          }
          
          Write-Output "$processName has stopped within the 1-minute check period."
          exit 1
        shell: powershell

      - name: Check Process Every 5 Seconds
        run: |
          if ($env:GITHUB_EVENT_NAME -eq 'schedule') {
            $endTime = (Get-Date).Date.AddHours(6)  # Check until 6:00 the next day
          } else {
            $endTimeString = '${{ github.event.inputs.end_time }}'
            if (-Not $endTimeString) {
              Write-Output "End time is not specified."
              exit 1
            }
            $endTime = [datetime]::ParseExact($endTimeString, 'HH:mm', $null).Date.AddHours([datetime]::ParseExact($endTimeString, 'HH:mm', $null).Hour).AddMinutes([datetime]::ParseExact($endTimeString, 'HH:mm', $null).Minute)
            
            if ($endTime -lt (Get-Date)) {
              $endTime = $endTime.AddDays(1)  # Set to the next day if it's already past the end time
            }
          }

          $processName = "Hutzper.Project.Mekiki"
          while ((Get-Date) -lt $endTime) {
            Start-Sleep -Seconds 5

            $process = Get-Process -Name $processName -ErrorAction SilentlyContinue
            if (-Not $process) {
              $deadTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
              Write-Output "The process stopped at $deadTime."
              exit 1
            }
          }
          Write-Output "The process stayed alive until the specified end time. Ending session."
          exit 0
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
        shell: powershell

      - name: Close Hutzper.Project.Mekiki
        run: |
          Stop-Process -Name Hutzper.Project.Mekiki -Force
        shell: powershell

      - name: Notify GitHub Actions of Result
        run: |
          Write-Output "Process result: Success"
        shell: powershell
