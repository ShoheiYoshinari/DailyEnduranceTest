name: Visual Studio Workflow

on:
  schedule:
    - cron: '0 22 * * *'  # Start the process every day at 22:00
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform (start, check, stop)'
        required: false
        default: 'start'
        type: string
      end_time:
        description: 'End time for retry loop (HH:mm format)'
        required: false
        type: string

jobs:
  prepare:
    runs-on: [self-hosted, windows]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Prepare Project Directory
        run: |
          $projectDir = "C:\CSharp.Hutzper.Library"
          $repositoryUrl = "https://github.com/Hutzper-inc/CSharp.Hutzper.Library.git"
          
          if (-Not (Test-Path $projectDir)) {
            git clone $repositoryUrl $projectDir
          } else {
            Set-Location -Path $projectDir
            git pull origin develop
          }
        shell: powershell

      - name: Start Visual Studio
        id: start-visual-studio
        run: |
          # Start Visual Studio and open the solution file
          Start-Process "devenv.exe" -ArgumentList "C:\CSharp.Hutzper.Library\Hutzper.Library.sln" -NoNewWindow -PassThru
          Start-Sleep -Seconds 30
          Add-Type -AssemblyName System.Windows.Forms
          [System.Windows.Forms.SendKeys]::SendWait("{F5}")
        shell: powershell
        continue-on-error: true

  check-process:
    needs: prepare
    runs-on: [self-hosted, windows]
    steps:
      - name: Check if Process is Alive
        run: |
          Start-Sleep -Seconds 30
          $processName = "devenv"  # Visual Studio executable name
          $startTime = Get-Date
          $endTime = $startTime.AddMinutes(1)
          
          while ((Get-Date) -lt $endTime) {
            $process = Get-Process -Name $processName -ErrorAction SilentlyContinue

            if ($process) {
              Write-Output "$processName is running."
              exit 0
            }

            Start-Sleep -Seconds 5  # Check every 5 seconds
          }
          
          Write-Output "$processName has stopped within the 1-minute check period."
          exit 1
        shell: powershell

  retry-loop:
    needs: check-process
    runs-on: [self-hosted, windows]
    steps:
      - name: Check Process Every 5 Seconds
        run: |
          if ($env:GITHUB_EVENT_NAME -eq 'schedule') {
            $endTime = (Get-Date).Date.AddHours(6)  # Check until 6:00 the next day
          } else {
            $endTimeString = '${{ github.event.inputs.end_time }}'
            if (-Not $endTimeString) {
              Write-Output "End time is not specified."
              exit 1
            }
            $endTime = [datetime]::ParseExact($endTimeString, 'HH:mm', $null).Date.AddHours([datetime]::ParseExact($endTimeString, 'HH:mm', $null).Hour).AddMinutes([datetime]::ParseExact($endTimeString, 'HH:mm', $null).Minute)
            
            if ($endTime -lt (Get-Date)) {
              $endTime = $endTime.AddDays(1)  # Set to the next day if it's already past the end time
            }
          }

          $processName = "devenv"
          while ((Get-Date) -lt $endTime) {
            Start-Sleep -Seconds 5  # Recheck every 5 seconds

            $process = Get-Process -Name $processName -ErrorAction SilentlyContinue
            if (-Not $process) {
              $deadTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
              Write-Output "The process stopped at $deadTime."
              exit 1
            }
          }
          Write-Output "The process stayed alive until the specified end time. Ending session."
          exit 0
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
        shell: powershell

  finalize:
    needs: retry-loop
    runs-on: [self-hosted, windows]
    steps:
      - name: Close Visual Studio
        run: |
          Stop-Process -Name devenv -Force
        shell: powershell

      - name: Notify GitHub Actions of Result
        run: |
          Write-Output "Process result: Success" # Display success message
        shell: powershell
